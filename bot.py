import json

import requests
import asyncio
from datetime import datetime

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart

from aiogram.fsm.state import StatesGroup, State
from aiogram.handlers import CallbackQueryHandler
from aiogram.types import Message, ReplyKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardRemove, \
    InlineKeyboardMarkup, CallbackQuery
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.fsm.context import FSMContext
from aiogram.utils.chat_action import ChatActionSender

from decouple import config

import admin

bot = Bot(token=config('TOKEN'), default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = RedisStorage.from_url(config('REDIS_URL'))
dp = Dispatcher(storage=storage)


class RegistrationForm(StatesGroup):
    name = State()
    phone = State()
    birth_date = State()
    education = State()
    work_place = State()
    personal_data_agreement = State()
    library_rules_agreement = State()


def check_user_registration(telegram_id):
    response = requests.get(f'{config("API_URL")}readers/search_by_telegram_id', params={'telegram_id': telegram_id})
    return response.status_code == 200 and response.json()


@dp.callback_query(F.data.startswith('get_book_'))
async def get_book(call: CallbackQuery):
    await call.answer()
    telegram_id = call.from_user.id
    book_id = int(call.data.replace('get_book_', ''))

    if check_user_registration(telegram_id):
        response = requests.get(f'{config("API_URL")}books/is_available',
                                params={'book_id': book_id, 'telegram_id': telegram_id})
        if response.status_code == 200:
            if response.json().get('detail') == 'Already in the possession of the current reader':
                await call.message.answer('–≠—Ç–∞ –∫–Ω–∏–≥–∞ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É –í–∞—Å.')
            if response.json().get('detail') == 'Already in the possession of the another reader':
                await call.message.answer('–≠—Ç–∞ –∫–Ω–∏–≥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É –¥—Ä—É–≥–æ–≥–æ —á–∏—Ç–∞—Ç–µ–ª—è')
            if response.json().get('detail') == 'Book is available for issue':
                await call.message.answer(
                    '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å –æ—Ç–≤–µ—Ç–∏—Ç –í–∞–º.')
                await admin_new_order(book_id, call)
        else:
            await call.message.answer(f'{response.status_code}')
    else:
        await call.message.answer(
            "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /register.")


async def admin_new_order(book_id, call):
    librarians = requests.get(f'{config("API_URL")}users/get_librarians')
    book = requests.get(f'{config("API_URL")}books/search_by_pk', params={'pk': book_id})
    if librarians.status_code == 200 and book.status_code == 200:
        for librarian in librarians.json():
            inline_buttons = [
                [InlineKeyboardButton(text='üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)',
                                      url='https://services.pystart.by')],
                [InlineKeyboardButton(text='‚ÑπÔ∏è –û —á–∏—Ç–∞—Ç–µ–ª–µ', callback_data=f'about_reader_{call.from_user.id}')],
                [InlineKeyboardButton(text='‚úÖ –í—ã–¥–∞—Ç—å –∫–Ω–∏–≥—É', callback_data=f'issue_book_{book_id}')],
                [InlineKeyboardButton(text='‚ùå –û—Ç–∫–∞–∑–∞—Ç—å', callback_data=f'not_issue_book')],
                [InlineKeyboardButton(text='üìù –ù–∞–ø–∏—Å–∞—Ç—å —á–∏—Ç–∞—Ç–µ–ª—é', url=f'https://t.me/{call.from_user.username}')]
            ]
            inline_keyboard = InlineKeyboardMarkup(inline_keyboard=inline_buttons)

            await bot.send_message(librarian['telegram_id'],
                                   f'‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è<b>–ù–û–í–´–ô –ó–ê–ö–ê–ó</b>‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n\n'
                                   f'<b>–ê–≤—Ç–æ—Ä</b>: {book.json()["author"]}\n'
                                   f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {book.json()["title"]}\n'
                                   f'<b>–ú–µ—Å—Ç–æ –∏–∑–¥–∞–Ω–∏—è</b>: {book.json()["pub_place"]}\n'
                                   f'<b>–ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ</b>: {book.json()["publishing"]}\n'
                                   f'<b>–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è</b>: {book.json()["pub_date"]}\n'
                                   f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü</b>: {book.json()["num_pages"]}\n\n'
                                   f'<b>–ß–∏—Ç–∞—Ç–µ–ª—å</b>: {call.from_user.full_name}\n',
                                   reply_markup=inline_keyboard)
        return {'status_code': 200}
    return {'status_code': 400}


@dp.callback_query(F.data.startswith('issue_book_'))
async def issue_book_allowed(call: CallbackQuery):
    await call.answer()
    book_id = int(call.data.replace('issue_book_', ''))
    response = requests.post(f'{config("API_URL")}issues/book_issue/',
                             data={'book_id': book_id, 'reader': call.from_user.id})
    librarians = requests.get(f'{config("API_URL")}users/get_librarians')

    if response.status_code == 201:
        await call.message.answer('‚úÖ –ö–Ω–∏–≥–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∫ –≤—ã–¥–∞—á–µ. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–±—Ä–∞—Ç—å –µ–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ì—Ä–æ–¥–Ω–æ, —É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, 6.')
        for librarian in librarians.json():
            await bot.send_message(librarian['telegram_id'],
                                   f'‚úÖ –í—ã –æ–¥–æ–±—Ä–∏–ª–∏ –≤—ã–¥–∞—á—É –∫–Ω–∏–≥–∏.\n'
                                   f'{call.from_user.full_name} –¥–æ–ª–∂–µ–Ω –∑–∞–±—Ä–∞—Ç—å –µ–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.')
    else:
        await call.message.answer('–£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        for librarian in librarians.json():
            await bot.send_message(librarian['telegram_id'],
                                   f'–£–ø—Å... –ß—Ç–æ-—Ç –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n\n –ß–∏—Ç–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.\n '
                                   f'–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –Ω–∞–∑–æ–≤–∏—Ç–µ –µ–º—É –∫–æ–¥ –æ—à–∏–±–∫–∏: {response.status_code}')


@dp.callback_query(F.data.startswith('not_issue_book'))
async def issue_book_disallowed(call: CallbackQuery):
    await call.message.answer()
    librarians = requests.get(f'{config("API_URL")}users/get_librarians')
    inline_buttons_reader = [
        [InlineKeyboardButton(text='üìù –ù–∞–ø–∏—Å–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—é', url=f'tg://user?id={librarians.json()[0]["telegram_id"]}')]
    ]
    inline_keyboard_reader = InlineKeyboardMarkup(inline_keyboard=inline_buttons_reader)
    await call.message.answer('‚ùå –í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –≤—ã–¥–∞—á–µ –¥–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä–µ–º',
                              reply_markup=inline_keyboard_reader)


    inline_buttons_librarian = [
        [InlineKeyboardButton(text='üìù –ù–∞–ø–∏—Å–∞—Ç—å —á–∏—Ç–∞—Ç–µ–ª—é', url=f'https://t.me/{call.from_user.username}')]
    ]
    inline_keyboard_librarian = InlineKeyboardMarkup(inline_keyboard=inline_buttons_librarian)
    for librarian in librarians.json():
        await bot.send_message(librarian['telegram_id'],
                               f'–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –≤—ã–¥–∞—á–µ –∫–Ω–∏–≥–∏. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ —á–∏—Ç–∞—Ç–µ–ª—é', reply_markup=inline_keyboard_librarian)


@dp.callback_query(F.data.startswith('about_reader_'))
async def about_reader(call: CallbackQuery):
    await call.answer()
    reader_id = call.data.replace('about_reader_', '')
    response = requests.get(f'{config("API_URL")}readers/search_by_telegram_id',
                            params={'telegram_id': call.from_user.id})
    if response.status_code == 200:
        reader = response.json()
        inline_buttons = [
            [InlineKeyboardButton(text='üìñ –°–µ–π—á–∞—Å —á–∏—Ç–∞–µ—Ç (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)',
                                  callback_data=f'reader_books_now_{reader_id}')],
            [InlineKeyboardButton(text='üìö –ß–∏—Ç–∞–ª —Ä–∞–Ω–µ–µ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)',
                                  callback_data=f'reader_books_history_{reader_id}')],
        ]
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=inline_buttons)

        await call.message.answer(f'<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∏—Ç–∞—Ç–µ–ª–µ\n\n</b>'
                                  f'<b>–ò–º—è:</b> {reader["name"]}\n'
                                  f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {reader["phone"]}\n'
                                  f'<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {datetime.fromisoformat(reader["birth_date"]).strftime("%d.%m.%Y")}\n'
                                  f'<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {(datetime.now().date()).year - (datetime.strptime(reader["birth_date"], "%Y-%m-%d").date()).year}\n'
                                  f'<b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> {reader["education"]}\n'
                                  f'<b>–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:</b> {reader["work_place"]}\n'
                                  f'<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {datetime.fromisoformat(reader["date_create"]).strftime("%d.%m.%Y")}\n',
                                  reply_markup=inline_keyboard)


@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    telegram_id = message.from_user.id
    if check_user_registration(telegram_id):
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ì—Ä–û–ò–†–û, {message.from_user.first_name}!")
    else:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É! –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /register.")


@dp.message(Command('register'))
async def register_reader(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    if check_user_registration(telegram_id):
        await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ –∏ —Ñ–∞–º–∏–ª–∏—é:')
        await state.set_state(RegistrationForm.name)


@dp.message(RegistrationForm.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18.06.1993):')
    await state.set_state(RegistrationForm.birth_date)


@dp.message(RegistrationForm.birth_date)
async def process_birth_date(message: types.Message, state: FSMContext):
    await state.update_data(birth_date=message.text)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)]],
        resize_keyboard=True)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=keyboard)
    await state.set_state(RegistrationForm.phone)


@dp.message(RegistrationForm.phone)
async def process_phone(message: types.Message, state: FSMContext):
    if message.contact:
        phone = message.contact.phone_number
        await state.update_data(phone=phone)
        await message.answer(f'–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}')
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')

    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='–í—ã—Å—à–µ–µ')],
        [KeyboardButton(text='–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ')],
        [KeyboardButton(text='–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ')],
        [KeyboardButton(text='–û–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ')]
    ], resize_keyboard=True)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:", reply_markup=keyboard)
    await state.set_state(RegistrationForm.education)


@dp.message(RegistrationForm.education)
async def process_education(message: types, state: FSMContext):
    await state.update_data(education=message.text)

    await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ:',
                         reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegistrationForm.work_place)


@dp.message(RegistrationForm.work_place)
async def process_work_place(message: types, state: FSMContext):
    await state.update_data(work_place=message.text)

    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ü–æ–ª–∏—Ç–∏–∫–∏')]],
                                   resize_keyboard=True)
    await message.answer('–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –¥–µ–π—Å—Ç–≤—É—é—â–µ–π –≤ –∏–Ω—Å—Ç–∏—Ç—É—Ç–µ',
                         reply_markup=keyboard)
    await state.set_state(RegistrationForm.personal_data_agreement)


@dp.message(RegistrationForm.personal_data_agreement)
async def process_personal_data_agreement(message: types, state: FSMContext):
    await state.update_data(personal_data_agreement=True)

    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏')]],
                                   resize_keyboard=True, one_time_keyboard=True)
    await message.answer('–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ü—Ä–∞–≤–∏–ª–∞–º–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏', reply_markup=keyboard)
    await state.set_state(RegistrationForm.library_rules_agreement)


@dp.message(RegistrationForm.library_rules_agreement)
async def process_library_rules_agreement(message: types, state: FSMContext):
    await state.update_data(library_rules_agreement=True)

    user_data = await state.get_data()

    payload = {
        'telegram_id': message.from_user.id,
        'name': user_data['name'],
        'phone': user_data['phone'],
        'birth_date': datetime.strptime((user_data['birth_date']), '%d.%m.%Y').strftime('%Y-%m-%d'),
        'education': user_data['education'],
        'work_place': user_data['work_place'],
        'personal_data_agreement': user_data['personal_data_agreement'],
        'library_rules_agreement': user_data['library_rules_agreement']
    }

    response = requests.post(f'{config("API_URL")}readers/', data=payload)

    if response.status_code == 201:
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —á–∏—Ç–∞—Ç–µ–ª—å.', reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer(
            f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {response.status_code}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')

    await state.clear()


@dp.message(Command('last_books'))
async def books(message: Message):
    last_books = requests.get(f'{config("API_URL")}last_books/')
    if last_books.status_code == 200:
        last_books = last_books.json()
        inline_buttons = []
        for book in last_books:
            inline_buttons.append(
                [InlineKeyboardButton(text=f'{book["author"]} - {book["title"]}',
                                      callback_data=f'detail_{book['id']}')]
            )
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=inline_buttons, )
        async with ChatActionSender(bot=bot, chat_id=message.from_user.id, action='typing'):
            await asyncio.sleep(2)
            await message.answer('–í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–Ω–∏–≥ –≤ –Ω–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ:', reply_markup=inline_keyboard)


@dp.callback_query(F.data.startswith('detail_'))
async def view_book(call: CallbackQuery):
    await call.answer()
    book_id = int(call.data.replace('detail_', ''))
    book = requests.get(f'{config("API_URL")}books/search_by_pk', params={'pk': book_id})
    if book.status_code == 200:
        book = book.json()
        inline_kb_list = [
            [InlineKeyboardButton(text='–Ø —Ö–æ—á—É –≤–∑—è—Ç—å —ç—Ç—É –∫–Ω–∏–≥—É', callback_data=f'get_book_{book_id}')],
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=inline_kb_list)
        async with ChatActionSender(bot=bot, chat_id=call.from_user.id, action='typing'):
            await asyncio.sleep(2)
            await call.message.answer(
                f'<b>–ê–≤—Ç–æ—Ä</b>: {book["title"]}\n'
                f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {book["author"]}\n'
                f'<b>–ú–µ—Å—Ç–æ –∏–∑–¥–∞–Ω–∏—è</b>: {book["pub_place"]}\n'
                f'<b>–ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ</b>: {book["publishing"]}\n'
                f'<b>–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è</b>: {book["pub_date"]}\n'
                f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü</b>: {book["num_pages"]}', reply_markup=keyboard
            )


@dp.message(Command('my_books'))
async def my_books(message: Message):
    telegram_id = message.from_user.id
    if check_user_registration(telegram_id):
        response = requests.get(f'{config("API_URL")}issues/get_readers_books', params={'telegram_id': telegram_id})
        if response.status_code == 200:
            books = response.json()
            not_returned = '<b>–≠—Ç–∏ –∫–Ω–∏–≥–∏ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥—è—Ç—Å—è —É –í–∞—Å:</b>\n\n'
            for book in books:
                if not book['is_return']:
                    not_returned += (f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {book["book_title"]}\n'
                                     f'<b>–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:</b> {datetime.fromisoformat(book["issue_date"]).strftime("%d.%m.%Y")}\n'
                                     f'------------------------------------\n')

            inline_kb_list = [
                [InlineKeyboardButton(text='–ö–∞–∫–∏–µ –∫–Ω–∏–≥–∏ —è –±—Ä–∞–ª(–∞) —Ä–∞–Ω—å—à–µ?', callback_data='history_issues')],
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=inline_kb_list)

            if not_returned == '<b>–≠—Ç–∏ –∫–Ω–∏–≥–∏ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥—è—Ç—Å—è —É –í–∞—Å:</b>\n\n':
                await message.answer(
                    '–°–µ–π—á–∞—Å —É –í–∞—Å –Ω–µ—Ç –∫–Ω–∏–≥.\n'
                    '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏–µ –∫–Ω–∏–≥–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ '
                    '–∫–æ–º–∞–Ω–¥—ã /last_books –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º - /search', reply_markup=keyboard)
            else:
                await message.answer(not_returned, reply_markup=keyboard)

        elif response.status_code == 404 and response.json().get(
                'detail') == "No books were found for the current user.":
            await message.answer(
                '–í—ã –µ—â–µ –Ω–µ –±—Ä–∞–ª–∏ –∫–Ω–∏–≥–∏.\n'
                '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏–µ –∫–Ω–∏–≥–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ '
                '–∫–æ–º–∞–Ω–¥—ã /last_books –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º - /search')
        else:
            await message.answer(f'{response.status_code}')


@dp.callback_query(F.data == 'history_issues')
async def history_issues(call: CallbackQuery):
    await call.answer()
    telegram_id = call.from_user.id
    if check_user_registration(telegram_id):
        response = requests.get(f'{config("API_URL")}issues/get_readers_books', params={'telegram_id': telegram_id})
        if response.status_code == 200:
            books = response.json()
            returned = '<b>–≠—Ç–∏ –∫–Ω–∏–≥–∏ –í—ã –±—Ä–∞–ª–∏ —Ä–∞–Ω—å—à–µ:</b>\n\n'
            for book in books:
                if book['is_return']:
                    returned += (f'–ù–∞–∑–≤–∞–Ω–∏–µ: {book["book_title"]}\n'
                                 f'–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {datetime.fromisoformat(book["issue_date"]).strftime("%d.%m.%Y")}\n'
                                 f'------------------------------------\n')
            if returned == '<b>–≠—Ç–∏ –∫–Ω–∏–≥–∏ –í—ã –±—Ä–∞–ª–∏ —Ä–∞–Ω—å—à–µ:</b>\n\n':
                await call.message.answer(
                    '–í—ã –µ—â–µ –Ω–µ –±—Ä–∞–ª–∏ –∫–Ω–∏–≥–∏.\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏–µ –∫–Ω–∏–≥–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ '
                    '–∫–æ–º–∞–Ω–¥—ã /last_books –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º - /search')
            else:
                await call.message.answer(returned)
        elif response.status_code == 404 and response.json().get(
                'detail') == "No books were found for the current user.":
            await call.message.answer('–í—ã –µ—â–µ –Ω–µ –±—Ä–∞–ª–∏ –∫–Ω–∏–≥–∏.\n'
                                      '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏–µ –∫–Ω–∏–≥–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ '
                                      '–∫–æ–º–∞–Ω–¥—ã /last_books –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º - /search')
        else:
            await call.message.answer(f'{response.status_code}')


class SearchState(StatesGroup):
    waiting_for_query = State()


@dp.message(Command('search'))
async def search(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ (–º–æ–∂–Ω–æ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é)...')
    await state.set_state(SearchState.waiting_for_query)


@dp.message(SearchState.waiting_for_query)
async def perform_search(message: Message, state: FSMContext):
    query = message.text
    response = requests.get(f'{config("API_URL")}books/search', params={'query': query})
    if response.status_code == 200:
        books = response.json()
        inline_kb_list = []
        for book in books:
            inline_kb_list.append([InlineKeyboardButton(text=f'{book["author"]} - {book["title"]}',
                                                        callback_data=f'detail_{book['id']}')])

        keyboard = InlineKeyboardMarkup(inline_keyboard=inline_kb_list)
        await message.answer('<b>–í–æ—Ç, —á—Ç–æ –º—ã –Ω–∞—à–ª–∏ –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:</b>\n\n'
                             '<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–∏–≥—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</i>', reply_markup=keyboard)
    await state.clear()


async def main():
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == '__main__':
    asyncio.run(main())
